//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsumeWcf.ProxyWcfCalculator {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyWcfCalculator.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/add", ReplyAction="http://tempuri.org/ICalculator/addResponse")]
        int add(int firstnumber, int secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/add", ReplyAction="http://tempuri.org/ICalculator/addResponse")]
        System.Threading.Tasks.Task<int> addAsync(int firstnumber, int secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/mul", ReplyAction="http://tempuri.org/ICalculator/mulResponse")]
        int mul(int firstnumber, int secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/mul", ReplyAction="http://tempuri.org/ICalculator/mulResponse")]
        System.Threading.Tasks.Task<int> mulAsync(int firstnumber, int secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/sub", ReplyAction="http://tempuri.org/ICalculator/subResponse")]
        int sub(int firstnumber, int secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/sub", ReplyAction="http://tempuri.org/ICalculator/subResponse")]
        System.Threading.Tasks.Task<int> subAsync(int firstnumber, int secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/div", ReplyAction="http://tempuri.org/ICalculator/divResponse")]
        int div(int firstnumber, int secondnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/div", ReplyAction="http://tempuri.org/ICalculator/divResponse")]
        System.Threading.Tasks.Task<int> divAsync(int firstnumber, int secondnumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : ConsumeWcf.ProxyWcfCalculator.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<ConsumeWcf.ProxyWcfCalculator.ICalculator>, ConsumeWcf.ProxyWcfCalculator.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int add(int firstnumber, int secondnumber) {
            return base.Channel.add(firstnumber, secondnumber);
        }
        
        public System.Threading.Tasks.Task<int> addAsync(int firstnumber, int secondnumber) {
            return base.Channel.addAsync(firstnumber, secondnumber);
        }
        
        public int mul(int firstnumber, int secondnumber) {
            return base.Channel.mul(firstnumber, secondnumber);
        }
        
        public System.Threading.Tasks.Task<int> mulAsync(int firstnumber, int secondnumber) {
            return base.Channel.mulAsync(firstnumber, secondnumber);
        }
        
        public int sub(int firstnumber, int secondnumber) {
            return base.Channel.sub(firstnumber, secondnumber);
        }
        
        public System.Threading.Tasks.Task<int> subAsync(int firstnumber, int secondnumber) {
            return base.Channel.subAsync(firstnumber, secondnumber);
        }
        
        public int div(int firstnumber, int secondnumber) {
            return base.Channel.div(firstnumber, secondnumber);
        }
        
        public System.Threading.Tasks.Task<int> divAsync(int firstnumber, int secondnumber) {
            return base.Channel.divAsync(firstnumber, secondnumber);
        }
    }
}
